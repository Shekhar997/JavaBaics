1. Different ways to create an object in java?

2. How do you keep the count of active number of object in class?

3. For final variable we need to create the parametrised constructor to initialize. And once initialize the variable we can't change variable value
   We have to delete the object and recreate 
   
4. Whenever we are creating a class we have to judge should it be a child class or should it be a variable inside a class
   -> Is a and has a relationship
   --> Anything which is a class is inheritance 
   --> Anything which has a relation is a attribute
   
   For example 
   		-> Employee has a address (It will be attribute of class) -> Bcoz if we create a class it will get the properties of parent class.
   																	 Address class will have the id,name. But address should not need id, name
   																	 
   		-> FullTimeEmployee is a employee so it will extend Employee
    
 
5. Why multiple inheritance is not supported?
	If fullTimeEmployee extends Employee, Person
	
	and we call display method then JVM will get confused that which display is being called? Either of Employee or of person?
	It will add ambiguity to the code
	
	Solution is Interface

	
6. Is JVM platform independent? 
   -> Ans - No JVM is not platform independent
   
7. Difference between super() and super.
	-> super() - its use to call the constructor of the parent class
	-> super. -> its use to point to the object of parent class
	
8. Difference between this() and this.
	- this() - its use to call the constructor of the current class
	- this. -> its use to point to the object of current class
	
9. What is abstract function 
	- Any function which has only declaration and no body 
	
10. Interface
	- Group of function which are abstract in nature
	
11. If two interface have the same method then what will happen?
	- If class implements two interface and both have same method then nothing will happen methods are abstract in nature 
	
12. Why only static final variables used in interface?
	- Any variable inside the interface is by default public, by default static and final in nature
	
13. Can we have the methods with body in interface?
	- Yes, we can have default methods in interface with the body. These methods can be used as it is. We can change the body inside the class by overriding the method
	
14. Two interface with same default method can exists?
	- Nope, it will give compile time error. Solution - We can override the methods and then use
	
15. Which pillar of oops are used in interface?
	-> Abstraction and inheritance

16. What are functional and  marker Interface?

17. What are the keywords associated with Interface variable and why?

18. Exception Handling 
	- Logic to handle errors/exceptions in the code.

19. Different types of exception
	- Compile Time (Checked Exception) - SqlException,FileNotFound, 
	- Run Time (Unchecked Exception) - 
	
20. We can throws multiple but we can't throw multiple

21. What is stream?

22. How is ArrayList dynamic in size?

23. Difference between ArrayList.Remove(int index) and ArrayList.Remove(Object o)

23. means when override equal method will check if two object are equal sa they are with same hash code. It will update the value else it will add new entry
	(Simply) hash value of every key is checked if same hash value is there we check if key or object is same if yes will update the value
	-> We can override equal method and return false to add new entry in hashmap for same hash value.

	Two object can have same hashcode but are not equal
	If two object are equal they should have the same hashcode
	
24. Name 5 method of thread class?
	Start()
	run()
	sleep()
	join()
	notify(0
	notifyAll()
	
25. Difference between sleep() and yield() method

26. If we directly call Thread.run() method will it run?
	- Yes it should run as a method. No thread properties are associated with it.

27. run() -> Body of the thread which is to be executed. Thread.start() will call the Thread.run()

28. What is deamon thread

29. What are different thread scheduling algorithms
	-> SCFH
	-> primptive priority cycle
	-> time slicing
	-> round robin

